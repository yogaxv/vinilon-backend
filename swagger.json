{"swagger":"2.0","info":{"description":"","version":"1.0.0","title":""},"basePath":"/v1/api","tags":[],"schemes":["http"],"paths":{"/":{"get":{"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/users":{"get":{"summary":"Retrieve many UserEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/UserEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one UserEntity","parameters":[{"name":"UserEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/UserEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/UserEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"undefined":{"undefined":{"summary":"Create one DoMutationsEntity","parameters":[{"name":"DoMutationsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoMutationsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoMutationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/users/{id}":{"get":{"summary":"Retrieve one UserEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/UserEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one UserEntity","parameters":[{"name":"UserEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/UserEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/UserEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one UserEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/users/bulk":{"post":{"summary":"Create many UserEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/UserEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/companies":{"get":{"summary":"Retrieve many CompanyEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/CompanyEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one CompanyEntity","parameters":[{"name":"CompanyEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/CompanyEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CompanyEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/companies/{id}":{"get":{"summary":"Retrieve one CompanyEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CompanyEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one CompanyEntity","parameters":[{"name":"CompanyEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/CompanyEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CompanyEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one CompanyEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/companies/bulk":{"post":{"summary":"Create many CompanyEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CompanyEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/problems":{"get":{"summary":"Retrieve many ProblemEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/ProblemEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one ProblemEntity","parameters":[{"name":"ProblemEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/ProblemEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ProblemEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/problems/{id}":{"get":{"summary":"Retrieve one ProblemEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ProblemEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one ProblemEntity","parameters":[{"name":"ProblemEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/ProblemEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ProblemEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one ProblemEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/problems/bulk":{"post":{"summary":"Create many ProblemEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ProblemEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/vehicles":{"get":{"summary":"Retrieve many VehicleEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/VehicleEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one VehicleEntity","parameters":[{"name":"VehicleEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/VehicleEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/VehicleEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/vehicles/{id}":{"get":{"summary":"Retrieve one VehicleEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/VehicleEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one VehicleEntity","parameters":[{"name":"VehicleEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/VehicleEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/VehicleEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one VehicleEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/vehicles/bulk":{"post":{"summary":"Create many VehicleEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/VehicleEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/{id}":{"get":{"summary":"Retrieve one DoEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one DoEntity","parameters":[{"name":"DoEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one DoEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos":{"get":{"summary":"Retrieve many DoEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/DoEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one DoEntity","parameters":[{"name":"DoEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/loadInDoCompany":{"post":{"parameters":[{"type":"string","name":"company","required":true,"in":"query"},{"type":"string","name":"noDo","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/loadIn":{"post":{"parameters":[{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/send":{"post":{"parameters":[{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/finish":{"post":{"parameters":[{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/confirmed":{"post":{"parameters":[{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/start":{"post":{"parameters":[{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/activeDo":{"get":{"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos/bulk":{"post":{"summary":"Create many DoEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/dos-no-auth/{id}":{"get":{"summary":"Retrieve one DoEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one DoEntity","parameters":[{"name":"DoEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one DoEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos-no-auth":{"get":{"summary":"Retrieve many DoEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/DoEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one DoEntity","parameters":[{"name":"DoEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/dos-no-auth/loadIn":{"post":{"parameters":[{"type":"string","name":"deviceId","required":true,"in":"query"},{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos-no-auth/send":{"post":{"parameters":[{"type":"string","name":"deviceId","required":true,"in":"query"},{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos-no-auth/finish":{"post":{"parameters":[{"type":"string","name":"deviceId","required":true,"in":"query"},{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/dos-no-auth/bulk":{"post":{"summary":"Create many DoEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/doTransactions":{"post":{"summary":"Create one DoTransactionEntity","parameters":[{"name":"DoTransactionEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoTransactionEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoTransactionEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"get":{"summary":"Retrieve many DoTransactionEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/DoTransactionEntity"}}}},"produces":["application/json"],"consumes":["application/json"]}},"/doTransactions/mutate":{"post":{"parameters":[{"type":"string","name":"doId","required":true,"in":"query"}],"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/doTransactions/{id}":{"get":{"summary":"Retrieve one DoTransactionEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoTransactionEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one DoTransactionEntity","parameters":[{"name":"DoTransactionEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoTransactionEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoTransactionEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one DoTransactionEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/doTransactions/bulk":{"post":{"summary":"Create many DoTransactionEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoTransactionEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/medias/upload":{"post":{"responses":{"201":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/medias":{"get":{"summary":"Retrieve many MediaEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/MediaEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one MediaEntity","parameters":[{"name":"MediaEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/MediaEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/MediaEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/medias/{id}":{"get":{"summary":"Retrieve one MediaEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/MediaEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one MediaEntity","parameters":[{"name":"MediaEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/MediaEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/MediaEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one MediaEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/medias/bulk":{"post":{"summary":"Create many MediaEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/MediaEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/drivers":{"post":{"summary":"Create one DriverEntity","parameters":[{"name":"DriverEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DriverEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DriverEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"get":{"summary":"Retrieve many DriverEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/DriverEntity"}}}},"produces":["application/json"],"consumes":["application/json"]}},"/drivers/{id}":{"get":{"summary":"Retrieve one DriverEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DriverEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one DriverEntity","parameters":[{"name":"DriverEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DriverEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DriverEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one DriverEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/drivers/bulk":{"post":{"summary":"Create many DriverEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DriverEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/customers":{"post":{"summary":"Create one CustomerEntity","parameters":[{"name":"CustomerEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/CustomerEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CustomerEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"get":{"summary":"Retrieve many CustomerEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/CustomerEntity"}}}},"produces":["application/json"],"consumes":["application/json"]}},"/customers/{id}":{"get":{"summary":"Retrieve one CustomerEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CustomerEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one CustomerEntity","parameters":[{"name":"CustomerEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/CustomerEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CustomerEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one CustomerEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/customers/bulk":{"post":{"summary":"Create many CustomerEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CustomerEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/credentials":{"get":{"summary":"Retrieve many CredentialEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/CredentialEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one CredentialEntity","parameters":[{"name":"CredentialEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/CredentialEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CredentialEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/credentials/{id}":{"get":{"summary":"Retrieve one CredentialEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CredentialEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one CredentialEntity","parameters":[{"name":"CredentialEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/CredentialEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CredentialEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one CredentialEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/credentials/bulk":{"post":{"summary":"Create many CredentialEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/CredentialEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/auth/token":{"post":{"parameters":[{"type":"string","name":"type","required":true,"in":"query"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/auth/token/logout":{"post":{"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/auth/me":{"get":{"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/auth/data":{"get":{"parameters":[{"type":"string","name":"type","required":true,"in":"query"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/locations":{"post":{"summary":"Create one LocationsEntity","parameters":[{"name":"LocationsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/LocationsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/LocationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"get":{"summary":"Retrieve many LocationsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/LocationsEntity"}}}},"produces":["application/json"],"consumes":["application/json"]}},"/locations/{id}":{"get":{"summary":"Retrieve one LocationsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/LocationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one LocationsEntity","parameters":[{"name":"LocationsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/LocationsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/LocationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one LocationsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/locations/bulk":{"post":{"summary":"Create many LocationsEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/LocationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/do-mutations":{"post":{"summary":"Create one DoMutationsEntity","parameters":[{"name":"DoMutationsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoMutationsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoMutationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"get":{"summary":"Retrieve many DoMutationsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/DoMutationsEntity"}}}},"produces":["application/json"],"consumes":["application/json"]}},"/do-mutations/{id}":{"get":{"summary":"Retrieve one DoMutationsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoMutationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one DoMutationsEntity","parameters":[{"name":"DoMutationsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/DoMutationsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoMutationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one DoMutationsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/do-mutations/bulk":{"post":{"summary":"Create many DoMutationsEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/DoMutationsEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/acls":{"get":{"summary":"Retrieve many AclsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/AclsEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one AclsEntity","parameters":[{"name":"AclsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/AclsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/AclsEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/acls/{id}":{"get":{"summary":"Retrieve one AclsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/AclsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one AclsEntity","parameters":[{"name":"AclsEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/AclsEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/AclsEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one AclsEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/acls/bulk":{"post":{"summary":"Create many AclsEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/AclsEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/blast-email":{"get":{"summary":"Retrieve many BlastEmailEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/BlastEmailEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one BlastEmailEntity","parameters":[{"name":"BlastEmailEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/BlastEmailEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/BlastEmailEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/blast-email/{id}":{"get":{"summary":"Retrieve one BlastEmailEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/BlastEmailEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one BlastEmailEntity","parameters":[{"name":"BlastEmailEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/BlastEmailEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/BlastEmailEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one BlastEmailEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/blast-email/bulk":{"post":{"summary":"Create many BlastEmailEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/BlastEmailEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/modules":{"get":{"summary":"Retrieve many ModuleEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"limit","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?limit=number</strong><br/><i>Example:</i> <strong>?limit=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> (per_page) entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"per_page","description":"<h4>Alias for <code>limit</code></h4>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/ModuleEntity"}}}},"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one ModuleEntity","parameters":[{"name":"ModuleEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/ModuleEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ModuleEntity"}}},"produces":["application/json"],"consumes":["application/json"]}},"/modules/{id}":{"get":{"summary":"Retrieve one ModuleEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ModuleEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one ModuleEntity","parameters":[{"name":"ModuleEntity","required":true,"in":"body","schema":{"$ref":"#/definitions/ModuleEntity"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ModuleEntity"}}},"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one ModuleEntity","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":""}},"produces":["application/json"],"consumes":["application/json"]}},"/modules/bulk":{"post":{"summary":"Create many ModuleEntity","parameters":[{"name":"BulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/BulkDto"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/ModuleEntity"}}},"produces":["application/json"],"consumes":["application/json"]}}},"definitions":{"CompanyEntity":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"},"code":{"type":"string"},"employees":{"type":"array","items":{"type":"string"}}}},"CredentialEntity":{"type":"object","properties":{"id":{"type":"number"},"email":{"type":"string"},"password":{"type":"string"}}},"UserEntity":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"},"address":{"type":"string"},"phone":{"type":"string"},"email":{"type":"string"},"companyId":{"type":"number"},"company":{"$ref":"#/definitions/CompanyEntity"},"department":{"type":"string"},"token":{"type":"string"},"isDelete":{"type":"boolean"},"level":{"type":"string"},"credential":{"$ref":"#/definitions/CredentialEntity"},"acls":{"type":"array","items":{"type":"string"}}}},"BulkDto":{"type":"object","properties":{}},"ProblemEntity":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"}}},"DriverEntity":{"type":"object","properties":{"id":{"type":"number"},"drivingLicenseNo":{"type":"string"},"name":{"type":"string"},"address":{"type":"string"},"phone":{"type":"string"},"email":{"type":"string"},"firebaseToken":{"type":"string"},"notes":{"type":"string"},"token":{"type":"string"},"isDelete":{"type":"boolean"},"credential":{"$ref":"#/definitions/CredentialEntity"},"transactions":{"type":"array","items":{"type":"string"}},"dos":{"type":"array","items":{"type":"string"}},"allDos":{"type":"array","items":{"type":"string"}}}},"VehicleEntity":{"type":"object","properties":{"id":{"type":"number"},"policeNumber":{"type":"string"},"category":{"type":"string"},"type":{"type":"string"},"caroseryDimension":{"type":"string"},"truckDimension":{"type":"string"},"notes":{"type":"string"},"isDelete":{"type":"boolean"},"driver":{"$ref":"#/definitions/DriverEntity"},"dos":{"type":"array","items":{"type":"string"}}}},"Date":{"type":"object","properties":{}},"CustomerEntity":{"type":"object","properties":{"id":{"type":"number"},"code":{"type":"string"},"name":{"type":"string"},"address":{"type":"string"},"phone":{"type":"string"},"email":{"type":"string"},"firebaseToken":{"type":"string"},"token":{"type":"string"},"isDelete":{"type":"boolean"},"credential":{"$ref":"#/definitions/CredentialEntity"},"dos":{"type":"array","items":{"type":"string"}}}},"DoEntity":{"type":"object","properties":{"id":{"type":"number"},"company":{"type":"string"},"noDO":{"type":"string"},"date":{"$ref":"#/definitions/Date"},"updatedDate":{"$ref":"#/definitions/Date"},"noSO":{"type":"string"},"customerCode":{"type":"string"},"customerName":{"type":"string"},"address1":{"type":"string"},"address2":{"type":"string"},"address3":{"type":"string"},"phone":{"type":"string"},"noPO":{"type":"string"},"itemName":{"type":"string"},"qty":{"type":"number"},"uom":{"type":"string"},"weight":{"type":"number"},"note1":{"type":"string"},"note2":{"type":"string"},"spm":{"type":"string"},"spk":{"type":"string"},"pickUp":{"type":"string"},"customerEmail":{"type":"string"},"collectionEmail":{"type":"string"},"salesEmail":{"type":"string"},"deliveryEmail":{"type":"string"},"status":{"type":"string"},"lat":{"type":"number"},"lng":{"type":"number"},"deviceId":{"type":"string"},"customerComment":{"type":"string"},"customer":{"$ref":"#/definitions/CustomerEntity"},"transactions":{"type":"array","items":{"type":"string"}},"currentDriver":{"$ref":"#/definitions/DriverEntity"},"historyDrivers":{"type":"array","items":{"type":"string"}},"vehicle":{"$ref":"#/definitions/VehicleEntity"},"currentTransactionId":{"type":"number"},"locations":{"type":"array","items":{"type":"string"}}}},"DoTransactionEntity":{"type":"object","properties":{"id":{"type":"number"},"status":{"type":"string"},"assignedDriver":{"$ref":"#/definitions/DriverEntity"},"medias":{"type":"array","items":{"type":"string"}},"do":{"type":""},"date":{"$ref":"#/definitions/Date"},"problem":{"type":"string"},"notes":{"type":"string"},"lastPosition":{"type":"string"},"mutationCode":{"type":"string"}}},"MediaEntity":{"type":"object","properties":{"id":{"type":"number"},"url":{"type":"string"}}},"LocationsEntity":{"type":"object","properties":{"id":{"type":"number"},"lat":{"type":"number"},"lng":{"type":"number"},"do":{"type":""}}},"DoMutationsEntity":{"type":"object","properties":{"id":{"type":"number"},"problem":{"type":""},"notes":{"type":"string"},"lastPosition":{"type":"string"},"do":{"$ref":"#/definitions/DoEntity"}}},"AclsEntity":{"type":"object","properties":{"id":{"type":"number"},"moduleName":{"type":"string"},"manager":{"type":"boolean"},"operator":{"type":"boolean"},"userId":{"type":"number"},"user":{"type":""}}},"BlastEmailEntity":{"type":"object","properties":{"id":{"type":"number"},"actionCode":{"type":"string"},"action":{"type":"string"},"sales":{"type":"boolean"},"customer":{"type":"boolean"},"collection":{"type":"boolean"},"delivery":{"type":"boolean"},"template":{"type":"string"},"subject":{"type":"string"},"medias":{"type":"array","items":{"type":"string"}}}},"ModuleEntity":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"}}}}}